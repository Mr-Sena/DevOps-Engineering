Composição dos elementos do Kubernetes: 

Control Plane:
 - Responsabilidade: 
	+ Orquestração
	+ Gerenciamento

 - Componentes: 
	+ Api-Server -> Interface do comunicação com o Kubernetes. Fronteira de interação com o Kubernetes, e os demais componentes e/ou comandos(kubectl ...).
		* OBS: Também é possível interagir através dos endpoints da API.
	+ ETCD -> Banco de chave-valor. Armazenamento de todos os dados do Kubernetes.
		*OBS: Interação com o ETCD é realizado através do Api-Server.
	+ Scheduler -> Receber as especificações de pods com a relação de containers para subir e verifica qual Worker Node é adequado para executar o trabalho. 
	+ Controller Manager -> Análise dos parâmetro do Kubernetes; garantir o funcionamento da especificação da execução.
		* Tipos de Controller: Replicaset, NodeController, AutenticationController, etc...
	

Worker Node:

 - Responsabilidade:
	+ Operação de container
	+ Processar as requisições

 - Componentes: 
	+ Kube Proxy -> Garantir a comunicação entre todos os workers node dentro do cluster.
	+ Kubelet -> Execução de todos os containers(?). Além de oferecer o seu healthCheck
		OBS: Ele é responsável por interagir diretamente com o Container Runtime, porém, o Kubernete não possui o Container Runtime próprio. (Ele faz somente a orquestração do container, portanto, não a execução.)
	+ Container Runtime -> Possui a função para executar o container (Disponível para a interface).

3 Interfaces de comunicação básica: 
 - CRI (Container Runtime Interface) [containerD, cri-o]
 - CNI (Container Networking Interface) -> Gerenciamento de rede, provisionamento de ip interno do pod, garantia da comunicação de rede entre os containers. [weave ne t]
 - CSI (Container Storage Interface) -> Armazenamento de volume para o Kubernetes. [Amazon EBS, Gluster FS]  
 
 
 
NOTA: 
OCI (Open Container Initiative): criar um padrão de mercado seguido por todas as empresas que trabalham com containers de forma que todos sigam as mesmas interfaces para os formatos de containers e imagens

O RunC é o runtime padrão por trás tanto do ContainerD quanto do CRI-O e é atualmente uma das mais abrangentes implementações existentes